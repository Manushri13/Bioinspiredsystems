import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.metrics import classification_report

# Step 1: Simulate gene expression dataset
# 100 samples, 50 genes (features), binary labels (e.g., tumor vs. normal)
np.random.seed(42)
X = np.random.rand(100, 50)  # Simulated gene expression data
y = np.random.randint(0, 2, 100)  # Binary labels

# Step 2: Preprocess data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Step 3: Build bio-inspired neural network
model = Sequential([
    Dense(64, input_dim=50, activation='relu'),   # Simulating complex neuron behavior
    Dense(32, activation='relu'),                 # Bio-inspired hidden layer
    Dense(1, activation='sigmoid')                # Binary classification output
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Step 4: Train model
model.fit(X_train, y_train, epochs=50, batch_size=8, verbose=0)

# Step 5: Evaluate
y_pred = (model.predict(X_test) > 0.5).astype("int32")
print(classification_report(y_test, y_pred))
